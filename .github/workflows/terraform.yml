name: 'Terraform Infrastructure Deployment'

on:
  push:
    branches: 
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.5.7'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    
    # Use bash shell for all run steps
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Create terraform.tfvars from GitHub secrets and variables
    - name: Create terraform.tfvars
      run: |
        cat > terraform.tfvars << EOF
        # Azure Configuration
        azure_subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        azure_tenant_id       = "${{ secrets.AZURE_TENANT_ID }}"
        azure_client_id       = "${{ secrets.AZURE_CLIENT_ID }}"
        azure_client_secret   = "${{ secrets.AZURE_CLIENT_SECRET }}"

        # K3s Configuration
        k3s_token = "${{ secrets.K3S_TOKEN }}"

        # VM Configuration
        admin_username = "${{ vars.ADMIN_USERNAME || 'azureuser' }}"
        admin_password = "${{ secrets.ADMIN_PASSWORD }}"

        # ArgoCD Configuration
        argocd_admin_username = "${{ vars.ARGOCD_ADMIN_USERNAME || 'admin' }}"
        argocd_admin_password = "${{ secrets.ARGOCD_ADMIN_PASSWORD }}"

        # Rancher Configuration  
        rancher_admin_username = "${{ vars.RANCHER_ADMIN_USERNAME || 'admin' }}"
        rancher_admin_password = "${{ secrets.RANCHER_ADMIN_PASSWORD }}"

        # Monitoring Configuration
        enable_bitnami_monitoring = ${{ vars.ENABLE_BITNAMI_MONITORING || 'true' }}
        grafana_admin_username = "${{ vars.GRAFANA_ADMIN_USERNAME || 'admin' }}"
        grafana_admin_password = "${{ secrets.GRAFANA_ADMIN_PASSWORD }}"

        # Let's Encrypt Configuration
        letsencrypt_email = "${{ vars.LETSENCRYPT_EMAIL }}"

        # DNS Configuration
        domain_name = "${{ vars.DOMAIN_NAME }}"
        EOF
        
        echo "‚úÖ terraform.tfvars created successfully"

    # Setup Azure Authentication Environment Variables
    - name: Setup Azure Environment
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "‚úÖ Azure environment variables configured"

    # Optional: Azure CLI Login for verification (not required for Terraform)
    - name: Azure CLI Login (Verification)
      run: |
        az login --service-principal \
          --username ${{ secrets.AZURE_CLIENT_ID }} \
          --password ${{ secrets.AZURE_CLIENT_SECRET }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        az account show
      continue-on-error: true

    # Terraform Init
    - name: Terraform Init
      run: terraform init

    # Terraform Validate
    - name: Terraform Validate
      id: validate
      run: |
        echo "üîç Validating Terraform configuration..."
        terraform validate -json > validation.json 2>&1 || true
        if terraform validate; then
          echo "‚úÖ Terraform validation passed"
        else
          echo "‚ùå Terraform validation failed"
          echo "validation=failed" >> $GITHUB_OUTPUT
          cat validation.json
          exit 1
        fi

    # Terraform Plan
    - name: Terraform Plan
      id: plan
      run: |
        echo "üîç Running Terraform Plan..."
        terraform plan -input=false -no-color -out=tfplan -detailed-exitcode
        echo "plan_exitcode=$?" >> $GITHUB_OUTPUT
      continue-on-error: true

    # Show Plan Results
    - name: Plan Results
      if: always()
      run: |
        if [ "${{ steps.plan.outcome }}" = "success" ]; then
          echo "‚úÖ Terraform Plan succeeded"
          if [ -f tfplan ]; then
            echo "üìÑ Plan file created successfully"
          else
            echo "‚ö†Ô∏è Plan succeeded but no plan file found"
          fi
        else
          echo "‚ùå Terraform Plan failed"
          echo "Debug information:"
          echo "Plan outcome: ${{ steps.plan.outcome }}"
          echo "Working directory contents:"
          ls -la
          echo "Terraform version:"
          terraform version
          echo "Provider status:"
          terraform providers
        fi

    # Upload Plan Artifact
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      if: steps.plan.outcome == 'success' && hashFiles('tfplan') != ''
      with:
        name: terraform-plan
        path: tfplan
        retention-days: 5

    # Comment PR with Plan (for pull requests)
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Terraform Apply (only on main/master branch or manual workflow)
    - name: Terraform Apply
      if: |
        steps.plan.outcome == 'success' &&
        (
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && 
          github.event_name == 'push' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        )
      run: |
        echo "üöÄ Applying Terraform configuration..."
        if [ -f tfplan ]; then
          terraform apply -input=false -auto-approve tfplan
        else
          echo "‚ùå No plan file found. Plan must have failed."
          exit 1
        fi

    # Terraform Destroy (only on manual workflow)
    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: |
        echo "üí• Destroying Terraform infrastructure..."
        terraform destroy -input=false -auto-approve

    # Save Terraform State (optional - for backup)
    - name: Upload Terraform State
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-state
        path: terraform.tfstate*
        retention-days: 30

    # Clean up sensitive files
    - name: Cleanup
      if: always()
      run: |
        rm -f terraform.tfvars
        rm -f tfplan
        echo "üßπ Cleanup completed"